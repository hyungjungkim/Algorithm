// baekjoon 2156  
// icpc.me/2156

// Loop dp 
#include <iostream>
 
using namespace std;
 
int N;
int input[10001];
int dp[10001][3];
 
//0 -> 이번거 안마셨어.
//1 -> 0 + 입력
//2 -> 1 + 입력
 
int max(int a, int b) { return a > b ? a : b; }
 
int main(void) {
     
    scanf("%d", &N);
     
    for (int i = 1; i <= N; i++)
        scanf("%d", &input[i]);
 
    dp[1][1] = input[1];
    dp[2][0] = input[1];
    dp[2][1] = input[2];
    dp[2][2] = input[1] + input[2];
 
    for (int i = 3; i <= N; i++) {
        dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][1], dp[i - 1][2]));
        dp[i][1] = dp[i - 1][0] + input[i];
        dp[i][2] = dp[i - 1][1] + input[i];
    }
 
    printf("%d\n", max(dp[N][0],max(dp[N][1],dp[N][2])));
 
    return 0;
}

// recursion dp 
//
//  main.cpp
//  practice3
//
//  Created by 김형중 on 2016. 10. 17..
//  Copyright © 2016년 김형중. All rights reserved.
//

#include <iostream>
#include <cstring>

#define INF 987654321

using namespace std;

int input[10001];
int DP[10001][3];

int N;

int max(int a, int b) { return a > b ? a : b; }

int func(int n, int state) {
    //exit
    if (n == N)
        return 0;
    
    //initialize
    int &ret = DP[n][state];
    if (ret != -1) return ret;
    ret = -INF;
    
    //statement 
    if (state == 2) {
        ret = max(ret, func(n + 1, 0));
    }
    else {
        ret = max(ret, func(n + 1, state+1) + input[n+1]);
        ret = max(ret, func(n + 1, 0));
    }
    return ret;
}

int main(void) {
    
    memset(DP, -1, sizeof(DP));
    
    scanf("%d", &N);
    
    for (int i = 1; i <= N; i++) {
        scanf("%d", &input[i]);
    }
    
    printf("%d\n", func(0, 0));
    
    return 0;
}
